{"version":3,"sources":["Components/Header.js","App.js","serviceWorker.js","index.js"],"names":["media","text","link","icon","Home","AccountBalance","LocalOffer","ShoppingCart","Receipt","PermIdentity","useStyles","makeStyles","theme","menuFont","fontSize","display","padding","button","color","width","minHeight","drawerPaper","drawerHeader","alignItems","mixins","toolbar","justifyContent","listItemText","paddingLeft","listText","Header","props","classes","useTheme","useState","open","setOpen","handleDrawerToggle","CssBaseline","AppBar","Toolbar","Hidden","mdUp","IconButton","onClick","Drawer","className","drawer","variant","anchor","direction","onClose","paper","ModalProps","keepMounted","ChevronLeft","ChevronRight","Divider","map","item","ListItem","ListItemIcon","ListItemText","component","Link","to","mdDown","Grid","container","xs","justify","Button","disableRipple","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.916ef9e8.chunk.js","sourcesContent":["import React,{useState} from 'react';\r\nimport {    AppBar,Toolbar,CssBaseline,Button,Grid,Divider,\r\n            ListItem,ListItemText,ListItemIcon,Drawer,IconButton,Hidden \r\n        } from '@material-ui/core';\r\nimport MenuIcon  from '@material-ui/icons/Menu';\r\nimport { ChevronLeft,ChevronRight,Home,Receipt,AccountBalance,ShoppingCart,PermIdentity,LocalOffer }  from '@material-ui/icons';\r\nimport { makeStyles,useTheme } from '@material-ui/core/styles';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst drawerWidth = '40vw';\r\n\r\nconst media = [\r\n    {text:'Home',link:'/dashboard',icon:<Home/>},\r\n    {text:'Stok',link:'/dashboard',icon:<AccountBalance/>},\r\n    {text:'Penjualan',link:'/dashboard',icon:<LocalOffer/>},\r\n    {text:'Pembelian',link:'/dashboard',icon:<ShoppingCart/>},\r\n    {text:'Laporan',link:'/dashboard',icon:<Receipt/>},\r\n    {text:'Akun',link:'/dashboard',icon:<PermIdentity/>},\r\n]\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  menuFont:{\r\n    fontSize:'1.5vw',\r\n    display:'flex',\r\n    \"& $div\" : {\r\n        padding:'0.6vh 0.5vw 0 0'\r\n    }\r\n  },\r\n  button:{\r\n    color:'white',\r\n    width:'100%',\r\n    minHeight:'10vh',\r\n    padding:'0 2vw 0'\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth, \r\n  },\r\n  drawerHeader: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    padding: '0 8px',\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: 'flex-end',\r\n  },\r\n  listItemText:{\r\n    paddingLeft:'2vh',\r\n    fontSize:'2vh'\r\n  },\r\n  listText:{\r\n    fontSize:'2.5vh'\r\n  }\r\n}));\r\n\r\n\r\nconst Header = (props) => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [open,setOpen] = useState(false);\r\n\r\n  const handleDrawerToggle = () => {\r\n    setOpen(!open);\r\n  };\r\n\r\n    return (\r\n        <div>\r\n            <CssBaseline/>\r\n            <AppBar>\r\n                <Toolbar>\r\n                    <Hidden mdUp >\r\n\r\n                        <IconButton\r\n                            color=\"inherit\"\r\n                            onClick={handleDrawerToggle}\r\n                            >\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                        \r\n                        <Drawer\r\n                            className={classes.drawer}\r\n                            variant=\"temporary\"\r\n                            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\r\n                            open={open}\r\n                            onClose={handleDrawerToggle}\r\n                            classes={{\r\n                                paper: classes.drawerPaper,\r\n                            }}\r\n                            ModalProps={{\r\n                                keepMounted:true\r\n                            }}\r\n                        >\r\n                            \r\n                            <div className={classes.drawerHeader}>\r\n                            <IconButton onClick={handleDrawerToggle}>\r\n                                {theme.direction === 'ltr' ? <ChevronLeft /> : <ChevronRight />}\r\n                            </IconButton>\r\n                            </div>\r\n\r\n                            <Divider/>\r\n\r\n                            {\r\n                                media.map((item)=>(\r\n                                    <ListItem button >\r\n                                        <ListItemIcon>{item.icon}</ListItemIcon>\r\n                                        <ListItemText>\r\n                                            <div \r\n                                                className={classes.listText} \r\n                                                onClick={handleDrawerToggle} \r\n                                                component={Link} to={item.link}\r\n                                            >\r\n                                                {item.text}\r\n                                            </div>\r\n                                        </ListItemText>\r\n                                    </ListItem>\r\n                                ))\r\n                            }\r\n                        </Drawer>\r\n\r\n                    </Hidden>\r\n\r\n                    <Hidden mdDown >\r\n                        {\r\n                            media.map((item)=>(\r\n                                <Grid container item xs={2} justify='center' alignItems='center'>\r\n                                    <Button \r\n                                        className={classes.button}\r\n                                        component={Link} to={item.link}\r\n                                        disableRipple \r\n                                    >\r\n                                        <div className={classes.menuFont}  >\r\n                                            <div>{item.icon}</div>\r\n                                            {item.text}\r\n                                        </div>\r\n                                    </Button>\r\n                                </Grid>\r\n                            ))\r\n                        }\r\n                    </Hidden>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header","import React from 'react'\r\nimport Header from './Components/Header'\r\n\r\nconst App = () => {\r\n    return(\r\n        <div>\r\n            <Header/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}